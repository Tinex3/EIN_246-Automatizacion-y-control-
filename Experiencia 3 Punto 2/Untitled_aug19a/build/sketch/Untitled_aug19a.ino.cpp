#include <Arduino.h>
#line 1 "E:\\GitHub\\EIN_246-Automatizacion-y-control-\\Experiencia 3 Punto 2\\Untitled_aug19a\\Untitled_aug19a.ino"
// #include "arduino_secrets.h"
#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

const char DEVICE_LOGIN_NAME[] = "643411c7-7ef6-4e93-b1aa-f3cf381c469c";

const char SSID[] = "Amanda 2.4G";             // Network SSID (name)
const char PASS[] = "Gomezriquelmegomez12";    // Network password (use for WPA, or use as key for WEP)
const char DEVICE_KEY[] = "BOF4SPO2OJIN2NEGBZXD"; // Secret device password

void onCmChange();
void onMBrChange();

int cm;
int mBr;

#line 19 "E:\\GitHub\\EIN_246-Automatizacion-y-control-\\Experiencia 3 Punto 2\\Untitled_aug19a\\Untitled_aug19a.ino"
void initProperties();
#line 71 "E:\\GitHub\\EIN_246-Automatizacion-y-control-\\Experiencia 3 Punto 2\\Untitled_aug19a\\Untitled_aug19a.ino"
void setup();
#line 124 "E:\\GitHub\\EIN_246-Automatizacion-y-control-\\Experiencia 3 Punto 2\\Untitled_aug19a\\Untitled_aug19a.ino"
void loop();
#line 147 "E:\\GitHub\\EIN_246-Automatizacion-y-control-\\Experiencia 3 Punto 2\\Untitled_aug19a\\Untitled_aug19a.ino"
void core0Task(void *parameter);
#line 178 "E:\\GitHub\\EIN_246-Automatizacion-y-control-\\Experiencia 3 Punto 2\\Untitled_aug19a\\Untitled_aug19a.ino"
void core1Task(void *parameter);
#line 19 "E:\\GitHub\\EIN_246-Automatizacion-y-control-\\Experiencia 3 Punto 2\\Untitled_aug19a\\Untitled_aug19a.ino"
void initProperties()
{

  ArduinoCloud.setBoardId(DEVICE_LOGIN_NAME);
  ArduinoCloud.setSecretDeviceKey(DEVICE_KEY);
  ArduinoCloud.addProperty(cm, READWRITE, ON_CHANGE, onCmChange);
  ArduinoCloud.addProperty(mBr, READWRITE, ON_CHANGE, onMBrChange);
}

WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);

#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>

// iniciamos el panel y le asignamos la sigla lcd para llamar a las funciones de la libreria
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Entradas digitales
#define Boton1 2
#define Boton2 4

// salida digital
#define Led 15

// entrada analogica
#define SensorNivel 34
#define SensorPresion 35

int LecturaSensorNivel, LecturaSensorPresion;

int EstadoBoton1 = 0;
int EstadoBoton2 = 0;
int EstadoSumado = 0;
int MapeoNivel;
int MapeoPresion;

/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/694f5359-9f53-4469-a6b5-d3523e80a62b

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int cm;
  int mBr;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

void setup()
{
  Serial.begin(115200);
  Serial.println("Hello, ESP32!");
  pinMode(Led, OUTPUT);
  pinMode(Boton1, INPUT);
  pinMode(Boton2, INPUT);
  pinMode(SensorNivel, INPUT);
  pinMode(SensorPresion, INPUT);
  lcd.init();
  lcd.backlight();

  // Crear la tarea del Core 0
  xTaskCreatePinnedToCore(
      core0Task,     // Función de la tarea
      "Core 0 Task", // Nombre de la tarea
      10000,         // Tamaño de la pila
      NULL,          // Parámetros de la tarea
      1,             // Prioridad
      NULL,          // Manejador de la tarea
      0              // Número del core (0 para Core 0)
  );

  // Crear la tarea del Core 1
  xTaskCreatePinnedToCore(
      core1Task,     // Función de la tarea
      "Core 1 Task", // Nombre de la tarea
      10000,         // Tamaño de la pila
      NULL,          // Parámetros de la tarea
      1,             // Prioridad
      NULL,          // Manejador de la tarea
      1              // Número del core (1 para Core 1)
  );
  // Initialize serial and wait for port to open:
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop()
{
  ArduinoCloud.update();
  // Your code here
}

/*
  Since MBr is READ_WRITE variable, onMBrChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMBrChange()
{
  mBr = MapeoPresion;
}

/*
  Since Cm is READ_WRITE variable, onCmChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCmChange()
{
  cm = MapeoNivel;
}
void core0Task(void *parameter)
{
  while (true)
  {
    // Leer el estado del botón 1
    EstadoBoton1 = digitalRead(Boton1);
    // Leer el estado del botón 2
    EstadoBoton2 = digitalRead(Boton2);
    LecturaSensorNivel = analogRead(SensorNivel);
    LecturaSensorPresion = analogRead(SensorPresion);
    MapeoNivel = map(LecturaSensorNivel, 760, 1840, 0, 35);
    MapeoPresion = map(LecturaSensorPresion, 580, 1200, 0, 400);
    lcd.setCursor(0, 0);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(": ");
    lcd.print(MapeoPresion);
    lcd.print("mBr");

    lcd.setCursor(0, 1);
    lcd.print("Nivel: ");
    lcd.print(MapeoNivel);
    lcd.print(" cm");
    delay(25);
    void onMBrChange();
    void onCmChange();
    ArduinoCloud.update();
  }
}

// Declaración de la tarea del Core 1
void core1Task(void *parameter)
{
  while (true)
  {
    // No es necesario modificar el código en el Core 1
    if (EstadoBoton1 == HIGH)
    {
      EstadoSumado = EstadoSumado + 1;
      EstadoSumado = EstadoSumado - 1;

      Serial.println(EstadoSumado);

      digitalWrite(Led, HIGH); // Enciende el LED
      Serial.println("Prendido");
      delay(2500);
    }
    if (EstadoBoton2 == HIGH)
    {
      EstadoSumado = EstadoSumado - 1;
      digitalWrite(Led, LOW); // Apaga el LED
      Serial.println(EstadoSumado);
      Serial.println("Apagado");
      delay(2500);
    }
  }
}

